(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{640:function(t,v,s){"use strict";s.r(v);var _=s(4),a=Object(_.a)({},(function(){var t=this,v=t.$createElement,s=t._self._c||v;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("Boxx"),t._v(" "),s("h2",{attrs:{id:"es6-模块化开发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块化开发"}},[t._v("#")]),t._v(" Es6 模块化开发")]),t._v(" "),s("p",[t._v("Es6 入门可参考：https://es6.ruanyifeng.com/")]),t._v(" "),s("p",[s("strong",[t._v("实现：")])]),t._v(" "),s("ul",[s("li",[t._v("导入其它模块使用 require() 方法")]),t._v(" "),s("li",[t._v("模块对外共享成员使用 module.exports 对象")])]),t._v(" "),s("p",[t._v("好处：降低了沟通的成本，极大方便了各个模块之间的相互调用")]),t._v(" "),s("blockquote",[s("p",[t._v("ES6 模块化规范是浏览器端与服务器端通用的模块化开发规范")])]),t._v(" "),s("p",[s("strong",[t._v("ES6 模块化规范中定义:")])]),t._v(" "),s("ul",[s("li",[t._v("每个 js 文件都是一个独立的模块")]),t._v(" "),s("li",[t._v("导入其它模块成员使用 import 关键字")]),t._v(" "),s("li",[t._v("向外共享模块成员使用 export 关键字")])]),t._v(" "),s("blockquote",[s("p",[t._v('可在 node.js 中进行练习 在 package.json 的根节点中添加 "type": "module" 节点')])]),t._v(" "),s("h3",{attrs:{id:"es6-模块化的基本语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块化的基本语法"}},[t._v("#")]),t._v(" ES6 模块化的基本语法")]),t._v(" "),s("p",[s("strong",[t._v("主要包含三种用法：")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("默认导出与默认导入")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("默认导出（ export default 默认导出的成员）注意：只允许使用唯一的一次 export default")])]),t._v(" "),s("li",[s("p",[t._v("默认 导入（ import 接收名称 from '模块标识符'）注意：默认导入时的接收名称可以任意名称，合法的成员名称即可")])])])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("按需导出与按需导入")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("导出 export 按需导出的成员")])]),t._v(" "),s("li",[s("p",[t._v("导入 import { s1 } from '模块标识符'")])]),t._v(" "),s("li",[s("p",[t._v("注意:")]),t._v(" "),s("ul",[s("li",[t._v("可以使用多次按需导出,")]),t._v(" "),s("li",[t._v("按需导入的成员名称必须和按需导出的名称保持一致")]),t._v(" "),s("li",[t._v("按需导入时，可以使用 as 关键字进行重命名")]),t._v(" "),s("li",[t._v("按需导入可以和默认导入一起使用")])])])])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("直接导入并执行模块中的代码")]),t._v(" "),s("ul",[s("li",[t._v("import 路径 即可")])])])]),t._v(" "),s("h2",{attrs:{id:"promise"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" Promise")]),t._v(" "),s("blockquote",[s("p",[t._v("多层回调函数的相互嵌套，就形成了回调地狱,而 Promise 是为了解决这个问题")])]),t._v(" "),s("p",[s("strong",[t._v("基本概念")])]),t._v(" "),s("ol",[s("li",[t._v("Promise 是一个构造函数\n"),s("ul",[s("li",[t._v("创建 Promise 的实例 const p = new Promise()")]),t._v(" "),s("li",[t._v("new 出来的 Promise 实例对象，代表一个异步操作")])])]),t._v(" "),s("li",[t._v("Promise.prototype 上包含一个 .then() 方法\n"),s("ul",[s("li",[t._v("每一次 new Promise() 构造函数得到的实例对象")]),t._v(" "),s("li",[t._v("都可以通过原型链的方式访问到 .then() 方法，例如 p.then()")])])]),t._v(" "),s("li",[t._v(".then() 方法用来预先指定成功和失败的回调函数\n"),s("ul",[s("li",[t._v("p.then(成功的回调函数，失败的回调函数)")]),t._v(" "),s("li",[t._v("p.then(result => { }, error => { })")]),t._v(" "),s("li",[t._v("调用 .then() 方法时，成功的回调函数是必选的、失败的回调函数是可选的")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("基于 then-fs 读取文件内容 需要安装 then-fs 第三方包")]),t._v(" "),s("p",[t._v("提供的 readFile() 方法，可以异步地读取文件的内容，它的返回值是 Promise 的实例对象。因\n此可以调用 .then() 方法为每个 Promise 异步操作指定成功和失败之后的回调函数。")]),t._v(" "),s("p",[t._v("其中 Promise 支持链式调用，catch 方法可进行捕获异常和处理")]),t._v(" "),s("p",[t._v("Promise.all() 方法会发起并行的 Promise 异步操作，等所有的异步操作全部结束后才会执行下一步的 .then\n操作（等待机制）")]),t._v(" "),s("p",[t._v("Promise.race() 方法会发起并行的 Promise 异步操作，只要任何一个异步操作完成，就立即执行下一步的\n.then 操作（赛跑机制）")])]),t._v(" "),s("h2",{attrs:{id:"async-await"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#async-await"}},[t._v("#")]),t._v(" async/await")]),t._v(" "),s("blockquote",[s("p",[t._v("async/await 是 ES8（ECMAScript 2017）引入的新语法，用来简化 Promise 异步操作.")])]),t._v(" "),s("p",[s("strong",[t._v("async/await 的基本使用")])]),t._v(" "),s("ul",[s("li",[t._v("如果在 function 中使用了 await，则 function 必须被 async 修饰")]),t._v(" "),s("li",[t._v("在 async 方法中，第一个 await 之前的代码会同步执行，await 之后的代码会异步执行")])]),t._v(" "),s("p",[t._v("例：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("方法名")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" r1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" 异步执行的方法\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"eventloop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eventloop"}},[t._v("#")]),t._v(" EventLoop")]),t._v(" "),s("blockquote",[s("p",[t._v("JavaScript 是单线程的语言,为了防止某个耗时任务导致程序假死的问题，JavaScript 把待执行的任务分为了两类")]),t._v(" "),s("ul",[s("li",[t._v("同步任务（synchronous）")]),t._v(" "),s("li",[t._v("异步任务（asynchronous）")])]),t._v(" "),s("p",[t._v("JavaScript 主线程从“任务队列”中读取异步任务的回调函数，放到执行栈中依次执行。这个过程是循环不断的，所以整个的这种运行机制又称为 EventLoop（事件循环）。")])]),t._v(" "),s("h2",{attrs:{id:"宏任务和微任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#宏任务和微任务"}},[t._v("#")]),t._v(" 宏任务和微任务")]),t._v(" "),s("blockquote",[s("p",[t._v("JavaScript 把异步任务又做了进一步的划分，异步任务又分为两类:")]),t._v(" "),s("ul",[s("li",[t._v("宏任务（macrotask）\n"),s("ul",[s("li",[t._v("异步 Ajax 请求")]),t._v(" "),s("li",[t._v("setTimeout、setInterval、")]),t._v(" "),s("li",[t._v("文件操作")]),t._v(" "),s("li",[t._v("其它宏任务")])])]),t._v(" "),s("li",[t._v("微任务（microtask）\n"),s("ul",[s("li",[t._v("Promise.then、.catch 和 .finally")]),t._v(" "),s("li",[t._v("process.nextTick")]),t._v(" "),s("li",[t._v("其它微任务")])])])])]),t._v(" "),s("p",[s("strong",[t._v("宏任务和微任务的执行顺序:")])]),t._v(" "),s("p",[t._v("每一个宏任务执行完之后，都会检查是否存在待执行的微任务，如果有，则执行完所有微任务之后，再继续执行下一个宏任务。")])],1)}),[],!1,null,null,null);v.default=a.exports}}]);