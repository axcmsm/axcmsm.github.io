(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{654:function(e,t,s){"use strict";s.r(t);var a=s(4),v=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("Boxx"),e._v(" "),s("hr"),e._v(" "),s("h2",{attrs:{id:"websorcket"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#websorcket"}},[e._v("#")]),e._v(" websorcket")]),e._v(" "),s("p",[e._v("websorcket 是一种网络通信协议，是 HTML5 开始提供的一种单个 tcp 连 接上进行全双工通讯的协议")]),e._v(" "),s("p",[e._v("http 是单向的应用层协议。只能通过频繁的异步请求实现长轮询，效率低，耗资源。")]),e._v(" "),s("p",[s("strong",[e._v("http 协议：")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/axcmsm/tmp/raw/master/20210824171959.png",alt:""}})]),e._v(" "),s("p",[s("strong",[e._v("websorcket 协议：")])]),e._v(" "),s("p",[s("img",{attrs:{src:"D:%5Chuanjin%5C%E7%AC%94%E8%AE%B0%E5%8C%BA%5C%E5%8C%BA%E5%9F%9F%E4%BA%8C%5Cvue2.0%5Cimg%5Cimage-20210824172102966.png",alt:"image-20210824172102966"}})]),e._v(" "),s("h2",{attrs:{id:"websorcket-协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#websorcket-协议"}},[e._v("#")]),e._v(" websorcket 协议")]),e._v(" "),s("p",[e._v("本协议分为俩部分：握手和数据传输")]),e._v(" "),s("p",[e._v("握手是基于 http 协议的")]),e._v(" "),s("p",[e._v("来自客户端的的握手如下：")]),e._v(" "),s("div",{staticClass:"language-http line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[e._v("GET ws://localhost/chat HTTP/1.1\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Host:")]),e._v(" localhost\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Upgrade:")]),e._v(" websocket\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Connection:")]),e._v(" Upgrade\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Sec-WebSocket-Key:")]),e._v(" x3JJHMbDL1EzLkh9GBhXDw==\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Sec-WebSocket-Extensions:")]),e._v(" permessage-deflate\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Sec-WebSocket-Version:")]),e._v(" 13\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("来自服务端的握手:")]),e._v(" "),s("div",{staticClass:"language-http line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[s("span",{pre:!0,attrs:{class:"token response-status"}},[s("span",{pre:!0,attrs:{class:"token http-version property"}},[e._v("HTTP/1.1")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token status-code number"}},[e._v("101")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token reason-phrase string"}},[e._v("Switching Protocols")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Upgrade:")]),e._v(" websocket\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Connection:")]),e._v(" Upgrade\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Sec-WebSocket-Accept:")]),e._v(" HSmrc0sMlYUkAGmm5OPpG2HaGWk=\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Sec-WebSocket-Extensions:")]),e._v(" permessage-deflate\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[s("strong",[e._v("字段说明")]),e._v("：")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("头名称")]),e._v(" "),s("th",[e._v("说明")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("Connection：Upgrade")]),e._v(" "),s("td",[e._v("标识该 Http 请求是协议升级请求")])]),e._v(" "),s("tr",[s("td",[e._v("Upgrade: websocket")]),e._v(" "),s("td",[e._v("协议升级为 Websocket 协议")])]),e._v(" "),s("tr",[s("td",[e._v("Sec-WebSocket-Version: 13")]),e._v(" "),s("td",[e._v("客户端支持 websorcket 的版本")])]),e._v(" "),s("tr",[s("td",[e._v("Sec-WebSocket-Key")]),e._v(" "),s("td",[e._v("客户端采用 base64 编码的 24 位随机字符序列，服务器接受客户端 http 协议升级的证明，要求服务器响应一个对应的 Sec-WebSocket-Accept 头消息作为应答")])]),e._v(" "),s("tr",[s("td",[e._v("Sec-WebSocket-Extensions")]),e._v(" "),s("td",[e._v("协议扩展类型")])])])]),e._v(" "),s("h2",{attrs:{id:"客户端实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端实现"}},[e._v("#")]),e._v(" 客户端实现")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("websocket 对象")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var ws=new webSocket(url);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("blockquote",[s("p",[e._v("参数 url：ws://ip 地址:端口号/资源名称")])])]),e._v(" "),s("li",[s("p",[e._v("websocket 事件")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("事件")]),e._v(" "),s("th",[e._v("事件处理程序")]),e._v(" "),s("th",[e._v("描述")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("open")]),e._v(" "),s("td",[e._v("websocket 对象.onopen")]),e._v(" "),s("td",[e._v("建立连接时 触发")])]),e._v(" "),s("tr",[s("td",[e._v("message")]),e._v(" "),s("td",[e._v("websocket 对象.onmessage")]),e._v(" "),s("td",[e._v("客户端接收服务器数据时触发")])]),e._v(" "),s("tr",[s("td",[e._v("error")]),e._v(" "),s("td",[e._v("websocket 对象.onerror")]),e._v(" "),s("td",[e._v("通信发生错时触发")])]),e._v(" "),s("tr",[s("td",[e._v("close")]),e._v(" "),s("td",[e._v("websocket 对象.onclose")]),e._v(" "),s("td",[e._v("连接关闭时触发")])])])])])]),e._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[s("p",[e._v("websocket 方法")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("方法")]),e._v(" "),s("th",[e._v("描述")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("send（）")]),e._v(" "),s("td",[e._v("使用拦截发送数据")])])])])])]),e._v(" "),s("h2",{attrs:{id:"服务端实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务端实现"}},[e._v("#")]),e._v(" 服务端实现")]),e._v(" "),s("p",[e._v("Tomcat 的 7.0.5 版本开始支持 websocket，并且实现了 Java WebSocket 规范")]),e._v(" "),s("p",[e._v("Java WebSocket 是由一些列 webSocketEndpoint 组成，Endpoint 是一个 java 对象，代表 websocket 连接一端，对于服务端，我们可以视为处理具体的 websocket 消息接口，就像 servlet 与 http 请求一样。")]),e._v(" "),s("p",[s("strong",[e._v("定义")]),e._v("：")]),e._v(" "),s("ul",[s("li",[e._v("第一种是编程式：继承 javax.websocket.Endpoint 并实现其方法")]),e._v(" "),s("li",[e._v("第二种是注解式：定义 POJO，并添加 @ServerEndpoint 相关注解")])]),e._v(" "),s("p",[e._v("Endpoint 实例在 websoccket 握手时创建。并在客户端和服务端连接过程中有效，连接关闭时结束。")]),e._v(" "),s("p",[e._v("Endpoint 接口与生命周期相关方法")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("方法")]),e._v(" "),s("th",[e._v("描述")]),e._v(" "),s("th",[e._v("注解")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("onClose")]),e._v(" "),s("td",[e._v("当会话关闭时调用")]),e._v(" "),s("td",[e._v("@onClose")])]),e._v(" "),s("tr",[s("td",[e._v("onOpen")]),e._v(" "),s("td",[e._v("当开启一个新的会话时调用，该方法是客户端与服务端握手成功后调用的方法")]),e._v(" "),s("td",[e._v("@onOpen")])]),e._v(" "),s("tr",[s("td",[e._v("onError")]),e._v(" "),s("td",[e._v("当连接过程中异常时调用")]),e._v(" "),s("td",[e._v("@onError")])])])]),e._v(" "),s("p",[s("strong",[e._v("服务端获取数据：")])]),e._v(" "),s("p",[e._v("服务端通过 Session 添加 MessageHandler 消息处理器来接收消息，采用注解方式话，可通过@onMessage 指定接收消息的方"),s("strong",[e._v("法")])]),e._v(" "),s("p",[s("strong",[e._v("服务端发送数据：")])]),e._v(" "),s("p",[e._v("由 RemoteEndpoint 完成，实例由 Session 维护，可通过 Session.getBasicRemote 获取同步消息发送实例，然后调用其 sendxxx 方法就可发送消息，可通过 Session。getAsyncRemote 获取异步消息发送实例")])],1)}),[],!1,null,null,null);t.default=v.exports}}]);