(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{639:function(t,n,a){"use strict";a.r(n);var s=a(4),r=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"springboot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot"}},[t._v("#")]),t._v(" Springboot")]),t._v(" "),a("h2",{attrs:{id:"思维导图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思维导图"}},[t._v("#")]),t._v(" 思维导图：")]),t._v(" "),a("hr"),t._v(" "),a("iframe",{attrs:{src:"https://www.processon.com/embed/6129fd07e0b34d3550f0cbb6",width:"100%",height:"500",frameborder:"0",scrolling:"No",leftmargin:"0",topmargin:"0"}}),t._v(" "),a("h3",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("blockquote",[a("p",[t._v("Spring的顶级项目之一"),a("a",{attrs:{href:"https://spring.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://spring.io"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("是一种快速使用Spring的方式，基于约定优于配置的思想")])]),t._v(" "),a("p",[a("strong",[t._v("功能")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("自动配置")]),t._v(" "),a("li",[t._v("起步依赖:依赖传递")]),t._v(" "),a("li",[t._v("辅助功能")])]),t._v(" "),a("blockquote",[a("p",[t._v("Spring Boot 并不是对 Spring 功能上的增强，而是提供了一种快速使用 Spring 的方式")])]),t._v(" "),a("p",[a("strong",[t._v("依赖原理分析")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("在spring-boot-starter-parent中定义了各种技术的版本信息，组合了一套最优搭配的技术版本。")]),t._v(" "),a("li",[t._v("在各种starter中，定义了完成该功能需要的坐标合集，其中大部分版本信息来自于父工程。")]),t._v(" "),a("li",[t._v("我们的工程继承parent，引入starter后，通过依赖传递，就可以简单方便获得需要的jar包，并且不会存在\n版本冲突等问题。")])]),t._v(" "),a("h2",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" "),a("strong",[t._v("配置")]),t._v("：")]),t._v(" "),a("blockquote",[a("p",[t._v("SpringBoot是基于约定的，所以很多配置都有默认值，但如果想使用自己的配置替换默认配置的话，就可以使用\napplication.properties或者application.yml（application.yaml）进行配置。")])]),t._v(" "),a("ul",[a("li",[t._v("pringBoot提供了2种配置文件类型：properteis和yml/yaml")]),t._v(" "),a("li",[t._v("默认配置文件名称：application")]),t._v(" "),a("li",[t._v("在同一级目录下优先级为：properties > yml > yaml")])]),t._v(" "),a("h3",{attrs:{id:"yarn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yarn"}},[t._v("#")]),t._v(" "),a("strong",[t._v("yarn:")])]),t._v(" "),a("blockquote",[a("p",[t._v("YML文件是以数据为核心的，比传统的xml方式更加简洁。YAML文件的扩展名可以使用.yml或者.yaml。")])]),t._v(" "),a("p",[t._v("基本语法：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("大小写敏感")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("数据值前边必须有空格，作为分隔符")])])]),t._v(" "),a("li",[a("p",[t._v("使用缩进表示层级关系")])]),t._v(" "),a("li",[a("p",[t._v("缩进时"),a("strong",[t._v("不允许使用Tab键，只允许使用空格")]),t._v("（各个系统 Tab对应的 空格数目可能不同，导致层次混乱）。")])]),t._v(" "),a("li",[a("p",[t._v("缩进的空格数目不重要，只要相同层级的元素左侧对齐即可")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("#")]),t._v(" 表示注释，从这个字符一直到行尾，都会被解析器忽略。")])])]),t._v(" "),a("p",[t._v("数据格式：")]),t._v(" "),a("ul",[a("li",[t._v("对象(map)：键值对的集合。")]),t._v(" "),a("li",[t._v("数组：一组按次序排列的值")]),t._v(" "),a("li",[t._v("纯量：单个的、不可再分的值")])]),t._v(" "),a("p",[t._v("参数引用：$(key)")]),t._v(" "),a("p",[a("strong",[t._v("读取配置文件内容")]),t._v("： @Value  Environment  @ConfigurationProperties\n"),a("strong",[t._v("profile")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("profile是用来完成不同环境下，配置动态切换功能的。\n2） profile配置方式\n 多profile文件方式：提供多个配置文件，每个代表一种环境。\n\t• application-dev.properties/yml 开发环境\n\t• application-test.properties/yml 测试环境\n\t• application-pro.properties/yml 生产环境\n yml多文档方式：\n\t• 在yml中使用 --- 分隔不同配置\n3） profile激活方式\n 配置文件： 再配置文件中配置：spring.profiles.active=dev\n 虚拟机参数：在VM options 指定：-Dspring.profiles.active=dev\n 命令行参数：java –jar xxx.jar --spring.profiles.active=dev\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[a("strong",[t._v("内部配置加载顺序")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Springboot程序启动时，会从以下位置加载配置文件：\n1. file:./config/：当前项目下的/config目录下\n2. file:./ ：当前项目的根目录\n3. classpath:/config/：classpath的/config目录\n4. classpath:/ ：classpath的根目录\n加载顺序为上文的排列顺序，高优先级配置的属性会生效\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[a("strong",[t._v("外部配置加载顺序")]),t._v("："),a("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"整合其他框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整合其他框架"}},[t._v("#")]),t._v(" 整合其他框架")]),t._v(" "),a("p",[a("strong",[t._v("SpringBoot整合Junit")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("① 搭建SpringBoot工程\n② 引入starter-test起步依赖\n③ 编写测试类\n④ 添加测试相关注解\n• @RunWith(SpringRunner.class)\n• @SpringBootTest(classes = 启动类.class)\n⑤ 编写测试方法\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[a("strong",[t._v("SpringBoot整合Redis：")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("① 搭建SpringBoot工程\n② 引入redis起步依赖\n③ 配置redis相关属性\n④ 注入RedisTemplate模板\n⑤ 编写测试方法，测试\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[a("strong",[t._v("SpringBoot整合MyBatis")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("① 搭建SpringBoot工程\n② 引入mybatis起步依赖，添加mysql驱动\n③ 编写DataSource和MyBatis相关配置\n④ 定义表和实体类\n⑤ 编写dao和mapper文件/纯注解开发\n⑥ 测试\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h2",{attrs:{id:"原理分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理分析"}},[t._v("#")]),t._v(" 原理分析")]),t._v(" "),a("h3",{attrs:{id:"自动配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动配置"}},[t._v("#")]),t._v(" 自动配置")]),t._v(" "),a("p",[a("strong",[t._v("Condition:")])]),t._v(" "),a("blockquote",[a("p",[t._v("Condition 是在Spring 4.0 增加的条件判断功能，通过这个可以功能可以实现选择性的创建 Bean 操作")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" 自定义条件：\n① 定义条件类：自定义类实现Condition接口，重写 matches 方法，在 matches 方法中进行逻辑判断，返回\nboolean值 。 matches 方法两个参数：\n\t• context：上下文对象，可以获取属性值，获取类加载器，获取BeanFactory等。\n\t• metadata：元数据对象，用于获取注解属性。\n② 判断条件： 在初始化Bean时，使用 @Conditional(条件类.class)注解\n \n SpringBoot 提供的常用条件注解：\n\t• ConditionalOnProperty：判断配置文件中是否有对应属性和值才初始化Bean\n\t• ConditionalOnClass：判断环境中是否有对应字节码文件才初始化Bean\n\t• ConditionalOnMissingBean ： 判断环境中没有对应Bean才初始化Bean\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[a("strong",[t._v("切换内置web服务器")])]),t._v(" "),a("blockquote",[a("p",[t._v("SpringBoot的web环境中默认使用tomcat作为内置服务器，其实SpringBoot提供了4中内置服务器供我们选择，我们可以很方便的进行切换。")])]),t._v(" "),a("p",[a("strong",[t._v("@Enable*注解")])]),t._v(" "),a("blockquote",[a("p",[t._v("SpringBoot中提供了很多Enable开头的注解，这些注解都是用于动态启用某些功能的。而其底层原理是使用@Import注解导入一些配置类，实现Bean的动态加载")])]),t._v(" "),a("p",[a("strong",[t._v("@Import注解")])]),t._v(" "),a("blockquote",[a("p",[t._v("@Enable*底层依赖于@Import注解导入一些类，使用@Import导入的类会被Spring加载到IOC容器中。而@Import提供4中用法：\n① 导入Bean\n② 导入配置类\n③ 导入 ImportSelector 实现类。一般用于加载配置文件中的类\n④ 导入 ImportBeanDefinitionRegistrar 实现类。")])]),t._v(" "),a("p",[a("strong",[t._v("@EnableAutoConfiguration 注解")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@EnableAutoConfiguration 注解内部使用 @Import(AutoConfigurationImportSelector.class)来加载配置类。\n配置文件位置：META-INF/spring.factories，该配置文件中定义了大量的配置类，当 SpringBoot 应用启动时，会自动加载   这些配置类，初始化Bean\n并不是所有的Bean都会被初始化，在配置类中使用Condition来加载满足条件的Bean\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h3",{attrs:{id:"监听机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#监听机制"}},[t._v("#")]),t._v(" 监听机制")]),t._v(" "),a("blockquote",[a("p",[t._v("SpringBoot 的监听机制，其实是对Java提供的事件监听机制的封装。\nJava中的事件监听机制定义了以下几个角色：\n① 事件：Event，继承 java.util.EventObject 类的对象\n② 事件源：Source ，任意对象Object\n③ 监听器：Listener，实现 java.util.EventListener 接口 的对象")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SpringBoot 在项目启动时，会对几个监听器进行回调，我们可以实现这些监听器接口，在项目启动时完成\n一些操作。\nApplicationContextInitializer、SpringApplicationRunListener、CommandLineRunner、ApplicationRunner\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h3",{attrs:{id:"启动流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动流程"}},[t._v("#")]),t._v(" 启动流程")]),t._v(" "),a("p",[a("img",{attrs:{src:"D:%5Chuanjin%5C%E7%AC%94%E8%AE%B0%E5%8C%BA%5C%E5%8C%BA%E5%9F%9F%E4%BA%8C%5Csssm%5C%E7%AC%94%E8%AE%B0%5Cimg%5C20210828165153.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#监控"}},[t._v("#")]),t._v(" 监控")]),t._v(" "),a("blockquote",[a("p",[t._v("SpringBoot自带监控功能Actuator，可以帮助实现对程序内部运行情况监控，比如监控状况、Bean加载情况、配置属性、日志信息等。")])]),t._v(" "),a("p",[t._v("使用：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("① 导入依赖坐标<dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-actuator</artifactId></dependency>② 访问http://localhost:8080/acruator\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("table",[a("thead",[a("tr",[a("th",[t._v("路径")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("/beans")]),t._v(" "),a("td",[t._v("描述应用程序上下文里全部的Bean，以及它们的关系")])]),t._v(" "),a("tr",[a("td",[t._v("/env")]),t._v(" "),a("td",[t._v("获取全部环境属性")])]),t._v(" "),a("tr",[a("td",[t._v("/env/{name}")]),t._v(" "),a("td",[t._v("根据名称获取特定的环境属性值")])]),t._v(" "),a("tr",[a("td",[t._v("/health")]),t._v(" "),a("td",[t._v("报告应用程序的健康指标，这些值由HealthIndicator的实现类提供")])]),t._v(" "),a("tr",[a("td",[t._v("/info")]),t._v(" "),a("td",[t._v("获取应用程序的定制信息，这些信息由info打头的属性提供")])]),t._v(" "),a("tr",[a("td",[t._v("/mappings")]),t._v(" "),a("td",[t._v("描述全部的URI路径，以及它们和控制器(包含Actuator端点)的映射关系")])]),t._v(" "),a("tr",[a("td",[t._v("/metrics")]),t._v(" "),a("td",[t._v("报告各种应用程序度量信息，比如内存用量和HTTP请求计数")])]),t._v(" "),a("tr",[a("td",[t._v("/metrics/{name}")]),t._v(" "),a("td",[t._v("报告指定名称的应用程序度量值")])]),t._v(" "),a("tr",[a("td",[t._v("/trace")]),t._v(" "),a("td",[t._v("提供基本的HTTP请求跟踪信息(时间戳、HTTP头等)")])])])]),t._v(" "),a("p",[a("strong",[t._v("Spring Boot Admin")]),t._v("：")]),t._v(" "),a("p",[t._v("⚫ Spring Boot Admin是一个开源社区项目，用于管理和监控SpringBoot应用程序。\n⚫ Spring Boot Admin 有两个角色，客户端(Client)和服务端(Server)。\n⚫ 应用程序作为Spring Boot Admin Client向为Spring Boot Admin Server注册\n⚫ Spring Boot Admin Server 的UI界面将Spring Boot Admin Client的Actuator Endpoint上的一些监控信息")]),t._v(" "),a("p",[t._v("使用：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("admin-server：① 创建 admin-server 模块② 导入依赖坐标 admin-starter-server③ 在引导类上启用监控功能@EnableAdminServeradmin-client：① 创建 admin-client 模块② 导入依赖坐标 admin-starter-client③ 配置相关信息：server地址等④ 启动server和client服务，访问server\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"项目部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目部署"}},[t._v("#")]),t._v(" 项目部署")]),t._v(" "),a("blockquote",[a("p",[t._v("SpringBoot 项目开发完毕后，支持两种方式部署到服务器：\n① jar包(官方推荐)\n② war包")])]),t._v(" "),a("hr")])}),[],!1,null,null,null);n.default=r.exports}}]);